!function(){"use strict";var e={d:function(t,n){for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},o:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}};e.d({},{h:function(){return ce}});var t={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__submit",inactiveButtonClass:"popup__submit_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible",popupError:".popup__error",errorType:".popup__error_type_"},n=document.querySelector(".profile__button-edit"),r=document.querySelector(".profile__button-add"),o=document.querySelector(".elements"),i=document.querySelectorAll(t.formSelector),u=document.querySelector(".popup_type_add"),s=u.querySelector(".popup__form"),a=(u.querySelector(".popup__close"),u.querySelector(".popup__submit")),c=u.querySelector("#title-input"),l=u.querySelector("#url-input-add"),f=document.querySelector(".popup_type_edit"),p=f.querySelector(".popup__form"),h=(f.querySelector(".popup__close"),f.querySelector(".popup__submit")),_=f.querySelector("#name-input"),d=f.querySelector("#job-input"),y=document.querySelector(".popup_type_profile-picture"),m=y.querySelector(".popup__submit"),v=y.querySelector("#url-input-profile"),b=y.querySelector(".popup__form"),g=(y.querySelector(".popup__close"),document.querySelector(".popup_type_confirm")),k=(g.querySelector(".popup__close"),g.querySelector(".popup__form")),S=g.querySelector(".popup__submit"),E=document.querySelector(".profile__name"),C=document.querySelector(".profile__job"),w=document.querySelector(".profile__avatar"),O=document.querySelector(".profile__avatar-overlay");function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var j=function(){function e(t){var n=t.baseUrl,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=n,this._headers=r,this._currentUser=this.getUserInfo()}var t,n;return t=e,(n=[{key:"_handleResponse",value:function(e){return e.ok?e.json():Promise.reject(console.log(e.status))}},{key:"getInitialCards",value:function(){var e=this;return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then((function(t){return e._handleResponse(t)})).then((function(e){return e})).catch((function(e){"Error, ".concat(e)}))}},{key:"uploadCard",value:function(e,t,n){var r=this;return n.innerText="Saving...",fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then((function(e){return r._handleResponse(e)})).then((function(e){return n.innerText="Save",e})).catch((function(e){"Error, ".concat(e)}))}},{key:"uploadProfileImg",value:function(e,t){return t.innerText="Saving...",fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((function(e){return t.innerText="Save",e.json()})).catch((function(e){"Error, ".concat(e)}))}},{key:"getUserInfo",value:function(){var e=this;return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then((function(t){return e._handleResponse(t)})).then((function(e){return e})).catch((function(e){"Error, ".concat(e)}))}},{key:"getUserImg",value:function(){var e=this;return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then((function(t){return e._handleResponse(t)})).catch((function(e){"Error, ".concat(e)}))}},{key:"uploadUserInfo",value:function(e,t){var n=this,r=e.name,o=e.job;return t.innerText="Saving...",fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:r,about:o})}).then((function(e){return n._handleResponse(e)})).then((function(e){return t.innerText="Save",e})).catch((function(e){"Error, ".concat(e)}))}},{key:"deleteCard",value:function(e,t){var n=this;return t.innerText="Deleting...",fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then((function(e){return n._handleResponse(e)})).then((function(e){return t.innerText="Yes",e})).catch((function(e){"Error, ".concat(e)}))}},{key:"removeLike",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers}).then((function(e){return t._handleResponse(e)})).then((function(e){return e})).catch((function(e){"Error, ".concat(e)}))}},{key:"addLike",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers}).then((function(e){return t._handleResponse(e)})).then((function(e){return e})).catch((function(e){"Error, ".concat(e)}))}}])&&L(t.prototype,n),e}();function I(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var P=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderedItems=r,this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderer",value:function(){var e=this;this._renderedItems.forEach((function(t){e._renderer(t)}))}},{key:"addItem",value:function(e){this._container.append(e)}}])&&I(t.prototype,n),e}();function q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var T=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=t,this._handleEscClose=this._handleEscClose.bind(this),this._handleClickClose=this._handleClickClose.bind(this),this._handleBtnClose=this._handleBtnClose.bind(this),this._closeBtn=this._popup.querySelector(".popup__close")}var t,n;return t=e,(n=[{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"_handleClickClose",value:function(e){e.target===this._popup&&this.close()}},{key:"_handleBtnClose",value:function(){this.close()}},{key:"setEventListeners",value:function(){document.addEventListener("keydown",this._handleEscClose),this._popup.addEventListener("click",this._handleClickClose),this._closeBtn.addEventListener("click",this._handleBtnClose)}},{key:"_removeEventListeners",value:function(){document.removeEventListener("keydown",this._handleEscClose),this._popup.removeEventListener("click",this._handleClickClose),this._closeBtn.removeEventListener("click",this._handleBtnClose)}},{key:"open",value:function(){this.setEventListeners(),this._popup.classList.add("popup_opened")}},{key:"close",value:function(){this._removeEventListeners(),this._popup.classList.remove("popup_opened")}}])&&q(t.prototype,n),e}();function R(e){return R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},R(e)}function B(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function x(e,t,n){return x="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=D(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}},x(e,t,n||e)}function U(e,t){return U=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},U(e,t)}function A(e,t){if(t&&("object"===R(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function D(e){return D=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},D(e)}var F=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&U(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=D(r);if(o){var n=D(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return A(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._popupImg=t._popup.querySelector(".image-popup__image"),t._popupTitle=t._popup.querySelector(".image-popup__text"),t}return t=u,(n=[{key:"open",value:function(e,t){this._popupImg.src=e,this._popupImg.alt=t,this._popupTitle.textContent=t,x(D(u.prototype),"open",this).call(this)}},{key:"close",value:function(){x(D(u.prototype),"close",this).call(this)}}])&&B(t.prototype,n),u}(T);function V(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var N=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._settings=t,this._form=n}var t,n;return t=e,(n=[{key:"_showInputError",value:function(e,t){var n=this._form.querySelector(this._settings.errorType+e.id);e.classList.add(this._settings.inputErrorClass),n.classList.add(this._settings.errorClass),n.textContent=t}},{key:"_hideInputError",value:function(e){var t=this._form.querySelector(this._settings.errorType+e.id);e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass),t.textContent=""}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}},{key:"_hasInvalidInput",value:function(e){return e.some((function(e){return!e.validity.valid}))}},{key:"_toggleButtonState",value:function(e,t){this._hasInvalidInput(e)?(t.classList.add(this._settings.inactiveButtonClass),t.setAttribute("disabled",!0)):(t.classList.remove(this._settings.inactiveButtonClass),t.removeAttribute("disabled",!0))}},{key:"_setEventListeners",value:function(){var e=this,t=Array.from(this._form.querySelectorAll(this._settings.inputSelector)),n=this._form.querySelector(this._settings.submitButtonSelector);this._toggleButtonState(t,n),t.forEach((function(r){r.addEventListener("input",(function(){e._checkInputValidity(r),e._toggleButtonState(t,n)}))}))}},{key:"enableValidation",value:function(){this._form.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}}])&&V(t.prototype,n),e}();function J(e){return J="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},J(e)}function H(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function M(e,t,n){return M="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=G(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}},M(e,t,n||e)}function z(e,t){return z=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},z(e,t)}function Y(e,t){if(t&&("object"===J(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return $(e)}function $(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function G(e){return G=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},G(e)}var K=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&z(e,t)}(s,e);var n,r,o,i,u=(o=s,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=G(o);if(i){var n=G(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Y(this,e)});function s(e,t){var n,r=e.handleFormSubmit,o=e.handlePopupOpen,i=t.popup,a=t.form;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),(n=u.call(this,i))._handleFormSubmit=r,n._handlePopupOpen=o,n._form=a,n._handleSubmission=n._handleSubmission.bind($(n)),n}return n=s,r=[{key:"_getInputValues",value:function(e){var t=Array.from(e.querySelectorAll(".popup__input")),n={};return t.forEach((function(e){var t=e.name.split("-")[0];n[t]=e.value})),n}},{key:"_handleSubmission",value:function(){this._handleFormSubmit(this._getInputValues(this._form))}},{key:"_setEventListeners",value:function(){this._form.addEventListener("submit",this._handleSubmission)}},{key:"_removeEventListeners",value:function(){this._form.removeEventListener("submit",this._handleSubmission)}},{key:"open",value:function(){this._handlePopupOpen(),this._setEventListeners(),M(G(s.prototype),"open",this).call(this)}},{key:"close",value:function(){!function(e,t){var n=e.querySelector(t.submitButtonSelector);null!==n&&n.classList.add(t.inactiveButtonClass)}(this._popup,t),function(e,t){Array.from(e.querySelectorAll(t.inputSelector)).forEach((function(e){e.classList.remove(t.inputErrorClass)})),Array.from(e.querySelectorAll(t.popupError)).forEach((function(e){e.classList.remove(t.errorClass),e.textContent=""}))}(this._popup,t),M(G(s.prototype),"close",this).call(this)}}],r&&H(n.prototype,r),s}(T);function Q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var W=function(){function e(t){var n=t.name,r=t.job;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._nameInput=n,this._jobInput=r,this._nameField=E,this._jobField=C}var t,n;return t=e,(n=[{key:"setUserInfo",value:function(e){var t=e.name,n=e.job;this._nameInput=t,this._jobInput=n,this._nameField.textContent=this._nameInput,this._jobField.textContent=this._jobInput}}])&&Q(t.prototype,n),e}();function X(e){return X="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},X(e)}function Z(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ee(e,t,n){return ee="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=oe(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}},ee(e,t,n||e)}function te(e,t){return te=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},te(e,t)}function ne(e,t){if(t&&("object"===X(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return re(e)}function re(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function oe(e){return oe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},oe(e)}var ie=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&te(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=oe(r);if(o){var n=oe(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return ne(this,e)});function u(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,e))._form=t,n._deleteCard=n._deleteCard.bind(re(n)),n}return t=u,(n=[{key:"_deleteCard",value:function(){var e=this;ce.deleteCard(this._delCardId,this._delBtn).then((function(){e._delCard.remove(),e.close()}))}},{key:"_setEventListeners",value:function(){this._form.addEventListener("submit",this._deleteCard)}},{key:"_removeEventListeners",value:function(){this._form.removeEventListener("submit",this._deleteCard)}},{key:"open",value:function(e,t,n){this._delCard=e,this._delCardId=t,this._delBtn=n,this._setEventListeners(),ee(oe(u.prototype),"open",this).call(this)}},{key:"close",value:function(){this._removeEventListeners(),ee(oe(u.prototype),"close",this).call(this)}}])&&Z(t.prototype,n),u}(T);function ue(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var se=function(){function e(t,n,r,o){var i=o.handlePopupOpen,u=o.handleDelete;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._card=t,this._currentUser=n,this._title=this._card.name,this._url=this._card.link,this._likeArray=this._card.likes,this._cardId=this._card._id,this._cardOwnerId=this._card.owner._id,this._selector=r,this._handlePopupOpen=i,this._handleDelete=u,this._handleToggleLike=this._handleToggleLike.bind(this),this._handleDeletion=this._handleDeletion.bind(this)}var t,n;return t=e,(n=[{key:"_getTemplate",value:function(){return document.querySelector(this._selector).content.querySelector(".element").cloneNode(!0)}},{key:"_setCardElements",value:function(){this._element=this._getTemplate(),this._elementImage=this._element.querySelector(".element__image"),this._elementTitle=this._element.querySelector(".element__title"),this._elementBtnLike=this._element.querySelector(".element__button-like"),this._elementBtnDel=this._element.querySelector(".element__button-delete"),this._elementLikeCount=this._element.querySelector(".element__like-count")}},{key:"_refreshLikesArray",value:function(e){this._likeArray=e.likes,this._elementLikeCount.textContent=e.likes.length}},{key:"_handleToggleLike",value:function(){var e=this;this._likeArray.some((function(t){return t._id===e._currentUser._id}))?(this._elementBtnLike.classList.remove("element__button-like_active"),ce.removeLike(this._cardId).then((function(t){e._refreshLikesArray(t)}))):(this._elementBtnLike.classList.add("element__button-like_active"),ce.addLike(this._cardId).then((function(t){e._refreshLikesArray(t)})))}},{key:"_handleDeletion",value:function(){this._handleDelete(this._element,this._cardId)}},{key:"_setEventLiteners",value:function(){this._elementBtnLike.addEventListener("click",this._handleToggleLike),this._elementBtnDel.addEventListener("click",this._handleDeletion),this._elementImage.addEventListener("click",this._handlePopupOpen)}},{key:"createCard",value:function(){var e=this;return this._setCardElements(),this._elementTitle.textContent=this._title,this._elementImage.src=this._url,this._elementImage.alt=this._title,this._elementLikeCount.textContent=this._card.likes.length,this._cardOwnerId!=this._currentUser._id&&(this._elementBtnDel.style.visibility="hidden"),this._likeArray.some((function(t){return t._id===e._currentUser._id}))&&this._elementBtnLike.classList.add("element__button-like_active"),this._setEventLiteners(),this._element}}])&&ue(t.prototype,n),e}();function ae(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ce=new j({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"bd66ac46-8c3d-415b-b4fe-d77bd0af375a","Content-Type":"application/json"}});Promise.all([ce.getUserInfo(),ce.getInitialCards(),ce.getUserImg()]).then((function(e){var L,j,I=(j=3,function(e){if(Array.isArray(e))return e}(L=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],u=!0,s=!1;try{for(n=n.call(e);!(u=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);u=!0);}catch(e){s=!0,o=e}finally{try{u||null==n.return||n.return()}finally{if(s)throw o}}return i}}(L,j)||function(e,t){if(e){if("string"==typeof e)return ae(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ae(e,t):void 0}}(L,j)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),q=I[0],T=I[1],R=I[2],B=function(e){return new se(e,q,"#element-template",{handlePopupOpen:function(){V.open(e.link,e.name)},handleDelete:function(e,t){J.open(e,t,S)}}).createCard()},x=new K({handleFormSubmit:function(e){ce.uploadUserInfo({name:e.name,job:e.job},h).then((function(e){D.setUserInfo({name:e.name,job:e.about}),x.close()}))},handlePopupOpen:function(){_.value=E.textContent,d.value=C.textContent}},{popup:f,form:p}),U=new P({items:T,renderer:function(e){U.addItem(B(e))}},".elements");U.renderer(),E.textContent=q.name,C.textContent=q.about,w.src=R.avatar;var A=document.querySelector(".image-popup"),D=new W({name:"",job:""}),V=new F(A),J=new ie(g,k),H=new K({handleFormSubmit:function(){ce.uploadProfileImg(v.value,m).then((function(e){w.src=e.avatar,H.close()}))},handlePopupOpen:function(){v.value=""}},{popup:y,form:b}),M=new K({handleFormSubmit:function(e){ce.uploadCard(e.name,e.link,a).then((function(e){o.prepend(B(e)),M.close()}))},handlePopupOpen:function(){c.value="",l.value=""}},{popup:u,form:s});i.forEach((function(e){new N(t,e).enableValidation()})),r.addEventListener("click",(function(){M.open()})),O.addEventListener("click",(function(){H.open()})),n.addEventListener("click",(function(){x.open()}))})).catch((function(e){return console.log("Error, ".concat(e))}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QTJCLEtBRTVCLENBQ0Q1SCxNQUFPNEgsRUFDUHhFLEtBQU13RSxJQUlGYSxFQUFlLElBQUl4RixFQUFjLENBQ3JDQyxpQkFBa0IsU0FBQzZFLEdBQ2pCeEQsR0FBSW1FLFdBQVdYLEVBQU9qSixLQUFNaUosRUFBT3hKLEtBQU1xSixHQUN0QzFKLE1BQUssU0FBQTZHLEdBQ0o2QyxFQUFBQSxRQUFpQ0osRUFBV3pDLElBQzVDMEQsRUFBYWpJLFlBR25CMkMsZ0JBQWlCLFdBQ2Z5RSxFQUFBQSxNQUE2QixHQUM3QkEsRUFBQUEsTUFBMkIsS0FFNUIsQ0FDRDVILE1BQU80SCxFQUNQeEUsS0FBTXdFLElBSVJBLEVBQUFBLFNBQTJCLFNBQUFlLEdBQ3pCLElBQUluSCxFQUFjb0csRUFBNEJlLEdBQWFDLHNCQUk3RGhCLEVBQUFBLGlCQUFrQyxTQUFTLFdBQ3pDYSxFQUFhZixVQUdmRSxFQUFBQSxpQkFBc0MsU0FBUyxXQUM3Q1csRUFBb0JiLFVBR3RCRSxFQUFBQSxpQkFBbUMsU0FBUyxXQUMxQ0UsRUFBaUJKLGFBRWxCdEosT0FBTSxTQUFBQyxHQUFLLE9BQUlQLFFBQVFDLElBQVIsaUJBQXNCTSxPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL0FwaS5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoQ29uZmlybS5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL3BhZ2VzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBkZWZpbml0aW9uKSB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iaiwgcHJvcCkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7IH0iLCIvLyBWYWxpZGF0aW9uIG9iamVjdCB3aXRoIHNldHRpbmdzIGZvciBmb3JtIHZhbGlkYXRpb24gY2xhc3NcbmV4cG9ydCBjb25zdCB2YWxpZGF0aW9uT2JqZWN0ID0ge1xuICBmb3JtU2VsZWN0b3I6IFwiLnBvcHVwX19mb3JtXCIsXG4gIGlucHV0U2VsZWN0b3I6IFwiLnBvcHVwX19pbnB1dFwiLFxuICBzdWJtaXRCdXR0b25TZWxlY3RvcjogXCIucG9wdXBfX3N1Ym1pdFwiLFxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcInBvcHVwX19zdWJtaXRfZGlzYWJsZWRcIixcbiAgaW5wdXRFcnJvckNsYXNzOiBcInBvcHVwX19pbnB1dF90eXBlX2Vycm9yXCIsXG4gIGVycm9yQ2xhc3M6IFwicG9wdXBfX2Vycm9yX3Zpc2libGVcIixcbiAgcG9wdXBFcnJvcjogXCIucG9wdXBfX2Vycm9yXCIsXG4gIGVycm9yVHlwZTogXCIucG9wdXBfX2Vycm9yX3R5cGVfXCJcbn1cblxuLy8gUGFnZSBlbGVtZW50cyBhbmQgbWlzY1xuZXhwb3J0IGNvbnN0IGVkaXRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fYnV0dG9uLWVkaXQnKTtcbmV4cG9ydCBjb25zdCBhZGRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fYnV0dG9uLWFkZCcpO1xuZXhwb3J0IGNvbnN0IGNhcmRzQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmVsZW1lbnRzJyk7XG5leHBvcnQgY29uc3QgZm9ybUxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHZhbGlkYXRpb25PYmplY3QuZm9ybVNlbGVjdG9yKTtcblxuLy8gYWRkUG9wdXAgZWxlbWVudHNcbmV4cG9ydCBjb25zdCBhZGRQb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF90eXBlX2FkZCcpO1xuZXhwb3J0IGNvbnN0IGFkZEZvcm0gPSBhZGRQb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Zvcm0nKTtcbmV4cG9ydCBjb25zdCBhZGRQb3B1cENsb3NlQnRuID0gYWRkUG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19jbG9zZScpO1xuZXhwb3J0IGNvbnN0IGFkZFBvcHVwU3VibWl0QnRuID0gYWRkUG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19zdWJtaXQnKTtcbmV4cG9ydCBjb25zdCB0aXRsZUlucHV0ID0gYWRkUG9wdXAucXVlcnlTZWxlY3RvcignI3RpdGxlLWlucHV0Jyk7XG5leHBvcnQgY29uc3QgdXJsSW5wdXQgPSBhZGRQb3B1cC5xdWVyeVNlbGVjdG9yKCcjdXJsLWlucHV0LWFkZCcpO1xuXG4vLyBlZGl0UG9wdXAgZWxlbWVudHNcbmV4cG9ydCBjb25zdCBlZGl0UG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfdHlwZV9lZGl0Jyk7XG5leHBvcnQgY29uc3QgZWRpdEZvcm0gPSBlZGl0UG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19mb3JtJyk7XG5leHBvcnQgY29uc3QgZWRpdFBvcHVwQ2xvc2VCdG4gPSBlZGl0UG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19jbG9zZScpO1xuZXhwb3J0IGNvbnN0IGVkaXRQb3B1cFN1Ym1pdEJ0biA9IGVkaXRQb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX3N1Ym1pdCcpO1xuZXhwb3J0IGNvbnN0IG5hbWVJbnB1dCA9IGVkaXRQb3B1cC5xdWVyeVNlbGVjdG9yKCcjbmFtZS1pbnB1dCcpO1xuZXhwb3J0IGNvbnN0IGpvYklucHV0ID0gZWRpdFBvcHVwLnF1ZXJ5U2VsZWN0b3IoJyNqb2ItaW5wdXQnKTtcblxuLy8gUG9wdXAgZm9yIGNoYW5naW5nIHByb2ZpbGUgaW1nIGVsZW1lbnRzXG5leHBvcnQgY29uc3QgaW1nQ2hhbmdlUG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfdHlwZV9wcm9maWxlLXBpY3R1cmUnKTtcbmV4cG9ydCBjb25zdCBpbWdDaGFuZ2VTdWJtaXRCdG4gPSBpbWdDaGFuZ2VQb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX3N1Ym1pdCcpO1xuZXhwb3J0IGNvbnN0IGltZ0lucHV0ID0gaW1nQ2hhbmdlUG9wdXAucXVlcnlTZWxlY3RvcignI3VybC1pbnB1dC1wcm9maWxlJyk7XG5leHBvcnQgY29uc3QgaW1nQ2hhbmdlRm9ybSA9IGltZ0NoYW5nZVBvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fZm9ybScpO1xuZXhwb3J0IGNvbnN0IGltZ0NoYW5nZUJ0biA9IGltZ0NoYW5nZVBvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fY2xvc2UnKTtcblxuLy8gUG9wdXAgZm9yIGNvbmZpcm1pbmcgY2FyZCBkZWxldGlvbiBlbGVtZW50c1xuZXhwb3J0IGNvbnN0IGNvbmZpcm1Qb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF90eXBlX2NvbmZpcm0nKTtcbmV4cG9ydCBjb25zdCBjb25maXJtUG9wdXBCdG4gPSBjb25maXJtUG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19jbG9zZScpO1xuZXhwb3J0IGNvbnN0IGNvbmZpcm1Qb3B1cEZvcm0gPSBjb25maXJtUG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19mb3JtJyk7XG5leHBvcnQgY29uc3QgY29uZmlybVBvcHVwRGVsQnRuID0gY29uZmlybVBvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fc3VibWl0Jyk7XG5cbi8vIFByb2ZpbGUgZWxlbWVudHNcbmV4cG9ydCBjb25zdCBuYW1lRmllbGQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fbmFtZScpO1xuZXhwb3J0IGNvbnN0IGpvYkZpZWxkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2pvYicpO1xuZXhwb3J0IGNvbnN0IHVzZXJBdmF0YXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fYXZhdGFyJyk7XG5leHBvcnQgY29uc3QgaW1nT3ZlcmxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlX19hdmF0YXItb3ZlcmxheScpO1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBpIHtcbiAgY29uc3RydWN0b3IoeyBiYXNlVXJsLCBoZWFkZXJzIH0pIHtcbiAgICB0aGlzLl9iYXNlVXJsID0gYmFzZVVybDtcbiAgICB0aGlzLl9oZWFkZXJzID0gaGVhZGVycztcbiAgICB0aGlzLl9jdXJyZW50VXNlciA9IHRoaXMuZ2V0VXNlckluZm8oKTtcbiAgfVxuXG4gIF9oYW5kbGVSZXNwb25zZShyZXMpIHtcbiAgICBpZiAocmVzLm9rKSB7XG4gICAgICByZXR1cm4gcmVzLmpzb24oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGNvbnNvbGUubG9nKHJlcy5zdGF0dXMpKTtcbiAgICB9XG4gIH1cblxuICBnZXRJbml0aWFsQ2FyZHMoKSB7XG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzYCwge1xuICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzXG4gICAgICB9KVxuICAgICAgLnRoZW4ocmVzID0+IHRoaXMuX2hhbmRsZVJlc3BvbnNlKHJlcykpXG4gICAgICAudGhlbihyZXMgPT4geyByZXR1cm4gcmVzIH0pXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7IGBFcnJvciwgJHtlcnJvcn1gIH0pO1xuICB9XG5cbiAgdXBsb2FkQ2FyZCh0aXRsZSwgbGluaywgc3VibWl0QnV0dG9uKSB7XG4gICAgc3VibWl0QnV0dG9uLmlubmVyVGV4dCA9IFwiU2F2aW5nLi4uXCI7XG5cbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHNgLCB7XG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBuYW1lOiB0aXRsZSxcbiAgICAgICAgICBsaW5rOiBsaW5rXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgICAgLnRoZW4ocmVzID0+IHRoaXMuX2hhbmRsZVJlc3BvbnNlKHJlcykpXG4gICAgICAudGhlbihjYXJkT2JqZWN0ID0+IHtcbiAgICAgICAgc3VibWl0QnV0dG9uLmlubmVyVGV4dCA9IFwiU2F2ZVwiO1xuICAgICAgICByZXR1cm4gY2FyZE9iamVjdDtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7IGBFcnJvciwgJHtlcnJvcn1gIH0pO1xuICB9XG5cbiAgdXBsb2FkUHJvZmlsZUltZyhsaW5rLCBzdWJtaXRCdXR0b24pIHtcbiAgICBzdWJtaXRCdXR0b24uaW5uZXJUZXh0ID0gXCJTYXZpbmcuLi5cIjtcblxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZS9hdmF0YXJgLCB7XG4gICAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxuICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgYXZhdGFyOiBsaW5rXG4gICAgICAgIH0pXG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgc3VibWl0QnV0dG9uLmlubmVyVGV4dCA9IFwiU2F2ZVwiO1xuICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7IGBFcnJvciwgJHtlcnJvcn1gIH0pO1xuICB9XG5cbiAgZ2V0VXNlckluZm8oKSB7XG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lYCwge1xuICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzXG4gICAgICB9KVxuICAgICAgLnRoZW4ocmVzID0+IHRoaXMuX2hhbmRsZVJlc3BvbnNlKHJlcykpXG4gICAgICAudGhlbihyZXMgPT4geyByZXR1cm4gcmVzIH0pXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7IGBFcnJvciwgJHtlcnJvcn1gIH0pO1xuICB9XG5cbiAgZ2V0VXNlckltZygpIHtcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XG4gICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnNcbiAgICAgIH0pXG4gICAgICAudGhlbihyZXMgPT4gdGhpcy5faGFuZGxlUmVzcG9uc2UocmVzKSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHsgYEVycm9yLCAke2Vycm9yfWAgfSk7XG4gIH1cblxuICB1cGxvYWRVc2VySW5mbyh7IG5hbWUsIGpvYiB9LCBzdWJtaXRCdXR0b24pIHtcbiAgICBzdWJtaXRCdXR0b24uaW5uZXJUZXh0ID0gXCJTYXZpbmcuLi5cIjtcblxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZWAsIHtcbiAgICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgIGFib3V0OiBqb2JcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgICAudGhlbihyZXMgPT4gdGhpcy5faGFuZGxlUmVzcG9uc2UocmVzKSlcbiAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgc3VibWl0QnV0dG9uLmlubmVyVGV4dCA9IFwiU2F2ZVwiO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHsgYEVycm9yLCAke2Vycm9yfWAgfSk7XG4gIH1cblxuICBkZWxldGVDYXJkKGNhcmRJZCwgZGVsZXRlQnV0dG9uKSB7XG4gICAgZGVsZXRlQnV0dG9uLmlubmVyVGV4dCA9IFwiRGVsZXRpbmcuLi5cIjtcblxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2NhcmRJZH1gLCB7XG4gICAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVyc1xuICAgICAgfSkudGhlbihyZXMgPT4gdGhpcy5faGFuZGxlUmVzcG9uc2UocmVzKSlcbiAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgZGVsZXRlQnV0dG9uLmlubmVyVGV4dCA9IFwiWWVzXCI7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4geyBgRXJyb3IsICR7ZXJyb3J9YCB9KTtcbiAgfVxuXG4gIHJlbW92ZUxpa2UoY2FyZElkKSB7XG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzL2xpa2VzLyR7Y2FyZElkfWAsIHtcbiAgICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxuICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgfSkudGhlbihyZXMgPT4gdGhpcy5faGFuZGxlUmVzcG9uc2UocmVzKSlcbiAgICAgIC50aGVuKHJlcyA9PiB7IHJldHVybiByZXMgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHsgYEVycm9yLCAke2Vycm9yfWAgfSk7XG4gIH1cblxuICBhZGRMaWtlKGNhcmRJZCkge1xuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy9saWtlcy8ke2NhcmRJZH1gLCB7XG4gICAgICAgIG1ldGhvZDogXCJQVVRcIixcbiAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgIH0pLnRoZW4ocmVzID0+IHRoaXMuX2hhbmRsZVJlc3BvbnNlKHJlcykpXG4gICAgICAudGhlbihyZXMgPT4geyByZXR1cm4gcmVzIH0pXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7IGBFcnJvciwgJHtlcnJvcn1gIH0pO1xuXG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlY3Rpb24ge1xyXG4gIGNvbnN0cnVjdG9yKHsgaXRlbXMsIHJlbmRlcmVyIH0sIHNlbGVjdG9yKSB7XHJcbiAgICB0aGlzLl9yZW5kZXJlZEl0ZW1zID0gaXRlbXM7XHJcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xyXG4gICAgdGhpcy5fY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XHJcbiAgfVxyXG5cclxuICByZW5kZXJlcigpIHtcclxuICAgIHRoaXMuX3JlbmRlcmVkSXRlbXMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgdGhpcy5fcmVuZGVyZXIoZWxlbWVudCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFkZEl0ZW0oZWxlbWVudCkge1xyXG4gICAgdGhpcy5fY29udGFpbmVyLmFwcGVuZChlbGVtZW50KTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xuICBjb25zdHJ1Y3Rvcihwb3B1cCkge1xuICAgIHRoaXMuX3BvcHVwID0gcG9wdXA7XG4gICAgdGhpcy5faGFuZGxlRXNjQ2xvc2UgPSB0aGlzLl9oYW5kbGVFc2NDbG9zZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2hhbmRsZUNsaWNrQ2xvc2UgPSB0aGlzLl9oYW5kbGVDbGlja0Nsb3NlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5faGFuZGxlQnRuQ2xvc2UgPSB0aGlzLl9oYW5kbGVCdG5DbG9zZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2Nsb3NlQnRuID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19jbG9zZScpO1xuICB9XG5cbiAgX2hhbmRsZUVzY0Nsb3NlKGV2dCkge1xuICAgIGlmIChldnQua2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIF9oYW5kbGVDbGlja0Nsb3NlKGV2dCkge1xuICAgIGlmIChldnQudGFyZ2V0ID09PSB0aGlzLl9wb3B1cCkge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIF9oYW5kbGVCdG5DbG9zZSgpIHtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICBzZXRFdmVudExpc3RlbmVycygpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xuICAgIHRoaXMuX3BvcHVwLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5faGFuZGxlQ2xpY2tDbG9zZSk7XG4gICAgdGhpcy5fY2xvc2VCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9oYW5kbGVCdG5DbG9zZSk7XG4gIH1cblxuICBfcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcbiAgICB0aGlzLl9wb3B1cC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX2hhbmRsZUNsaWNrQ2xvc2UpO1xuICAgIHRoaXMuX2Nsb3NlQnRuLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5faGFuZGxlQnRuQ2xvc2UpO1xuICB9XG5cbiAgb3BlbigpIHtcbiAgICB0aGlzLnNldEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LmFkZCgncG9wdXBfb3BlbmVkJyk7XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICB0aGlzLl9yZW1vdmVFdmVudExpc3RlbmVycygpO1xuICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5yZW1vdmUoJ3BvcHVwX29wZW5lZCcpO1xuICB9XG59XG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XG4gIGNvbnN0cnVjdG9yKHBvcHVwKSB7XG4gICAgc3VwZXIocG9wdXApO1xuICAgIHRoaXMuX3BvcHVwSW1nID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcignLmltYWdlLXBvcHVwX19pbWFnZScpO1xuICAgIHRoaXMuX3BvcHVwVGl0bGUgPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcuaW1hZ2UtcG9wdXBfX3RleHQnKTtcbiAgfVxuXG4gIG9wZW4odXJsLCB0aXRsZSkge1xuICAgIHRoaXMuX3BvcHVwSW1nLnNyYyA9IHVybDtcbiAgICB0aGlzLl9wb3B1cEltZy5hbHQgPSB0aXRsZTtcbiAgICB0aGlzLl9wb3B1cFRpdGxlLnRleHRDb250ZW50ID0gdGl0bGU7XG4gICAgc3VwZXIub3BlbigpO1xuICB9XG5cbiAgY2xvc2UoKSB7XG4gICAgc3VwZXIuY2xvc2UoKTtcbiAgfVxufVxuIiwiLy8gVmFsaWRhdGlvbiBjbGFzc1xyXG5cclxuY2xhc3MgRm9ybVZhbGlkYXRvciB7XHJcbiAgY29uc3RydWN0b3Ioc2V0dGluZ3MsIGZvcm1TZWxlY3Rvcikge1xyXG4gICAgdGhpcy5fc2V0dGluZ3MgPSBzZXR0aW5ncztcclxuICAgIHRoaXMuX2Zvcm0gPSBmb3JtU2VsZWN0b3I7XHJcbiAgfVxyXG5cclxuICBfc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50LCBlcnJvck1lc3NhZ2UpIHtcclxuICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3Rvcih0aGlzLl9zZXR0aW5ncy5lcnJvclR5cGUgKyBpbnB1dEVsZW1lbnQuaWQpO1xyXG4gICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5fc2V0dGluZ3MuaW5wdXRFcnJvckNsYXNzKTtcclxuICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX3NldHRpbmdzLmVycm9yQ2xhc3MpO1xyXG4gICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gZXJyb3JNZXNzYWdlO1xyXG4gIH1cclxuXHJcbiAgX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCkge1xyXG4gICAgY29uc3QgZXJyb3JFbGVtZW50ID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKHRoaXMuX3NldHRpbmdzLmVycm9yVHlwZSArIGlucHV0RWxlbWVudC5pZCk7XHJcbiAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9zZXR0aW5ncy5pbnB1dEVycm9yQ2xhc3MpO1xyXG4gICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fc2V0dGluZ3MuZXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gIH1cclxuXHJcbiAgX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpIHtcclxuICAgIGlmICghaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKSB7XHJcbiAgICAgIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCwgaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfaGFzSW52YWxpZElucHV0KGlucHV0TGlzdCkge1xyXG4gICAgcmV0dXJuIGlucHV0TGlzdC5zb21lKGlucHV0RWxlbWVudCA9PiB7XHJcbiAgICAgIHJldHVybiAhaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfdG9nZ2xlQnV0dG9uU3RhdGUoaW5wdXRMaXN0LCBidXR0b25FbGVtZW50KSB7XHJcbiAgICBpZiAodGhpcy5faGFzSW52YWxpZElucHV0KGlucHV0TGlzdCkpIHtcclxuICAgICAgYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX3NldHRpbmdzLmluYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgICBidXR0b25FbGVtZW50LnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIHRydWUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX3NldHRpbmdzLmluYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgICBidXR0b25FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImRpc2FibGVkXCIsIHRydWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgY29uc3QgaW5wdXRMaXN0ID0gQXJyYXkuZnJvbSh0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5fc2V0dGluZ3MuaW5wdXRTZWxlY3RvcikpO1xyXG4gICAgY29uc3QgYnV0dG9uRWxlbWVudCA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3Rvcih0aGlzLl9zZXR0aW5ncy5zdWJtaXRCdXR0b25TZWxlY3Rvcik7XHJcbiAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZShpbnB1dExpc3QsIGJ1dHRvbkVsZW1lbnQpO1xyXG4gICAgaW5wdXRMaXN0LmZvckVhY2goaW5wdXRFbGVtZW50ID0+IHtcclxuICAgICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKGlucHV0TGlzdCwgYnV0dG9uRWxlbWVudCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBlbmFibGVWYWxpZGF0aW9uKCkge1xyXG4gICAgdGhpcy5fZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBldnQgPT4ge1xyXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IHJlc2V0VmFsaWRhdGlvbiA9IChwb3B1cCwgdmFsaWRhdGlvbk9iamVjdCkgPT4ge1xyXG4gIGNvbnN0IGlucHV0TGlzdCA9IEFycmF5LmZyb20ocG9wdXAucXVlcnlTZWxlY3RvckFsbCh2YWxpZGF0aW9uT2JqZWN0LmlucHV0U2VsZWN0b3IpKTtcclxuICBpbnB1dExpc3QuZm9yRWFjaChpbnB1dEVsZW1lbnQgPT4ge1xyXG4gICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodmFsaWRhdGlvbk9iamVjdC5pbnB1dEVycm9yQ2xhc3MpO1xyXG4gIH0pO1xyXG5cclxuICBjb25zdCBlcnJvckxpc3QgPSBBcnJheS5mcm9tKHBvcHVwLnF1ZXJ5U2VsZWN0b3JBbGwodmFsaWRhdGlvbk9iamVjdC5wb3B1cEVycm9yKSk7XHJcbiAgZXJyb3JMaXN0LmZvckVhY2goZXJyb3JFbGVtZW50ID0+IHtcclxuICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHZhbGlkYXRpb25PYmplY3QuZXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gIH0pO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gcmVzZXRTdWJtaXRCdG4ocG9wdXAsIHZhbGlkYXRpb25PYmplY3QpIHtcclxuICBjb25zdCBzdWJtaXRCdG4gPSBwb3B1cC5xdWVyeVNlbGVjdG9yKHZhbGlkYXRpb25PYmplY3Quc3VibWl0QnV0dG9uU2VsZWN0b3IpO1xyXG4gIGlmIChzdWJtaXRCdG4gIT09IG51bGwpIHtcclxuICAgIHN1Ym1pdEJ0bi5jbGFzc0xpc3QuYWRkKHZhbGlkYXRpb25PYmplY3QuaW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQge1xyXG4gIHJlc2V0VmFsaWRhdGlvbixcclxuICByZXNldFN1Ym1pdEJ0bixcclxuICBGb3JtVmFsaWRhdG9yXHJcbn07XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xuaW1wb3J0IHsgdmFsaWRhdGlvbk9iamVjdCB9IGZyb20gXCIuLi9jb25zdGFudHMuanNcIjtcbmltcG9ydCB7IHJlc2V0U3VibWl0QnRuLCByZXNldFZhbGlkYXRpb24gfSBmcm9tIFwiLi9Gb3JtVmFsaWRhdG9yLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XG4gIGNvbnN0cnVjdG9yKHsgaGFuZGxlRm9ybVN1Ym1pdCwgaGFuZGxlUG9wdXBPcGVuIH0sIHsgcG9wdXAsIGZvcm0gfSkge1xuICAgIHN1cGVyKHBvcHVwKTtcbiAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcbiAgICB0aGlzLl9oYW5kbGVQb3B1cE9wZW4gPSBoYW5kbGVQb3B1cE9wZW47XG4gICAgdGhpcy5fZm9ybSA9IGZvcm07XG4gICAgdGhpcy5faGFuZGxlU3VibWlzc2lvbiA9IHRoaXMuX2hhbmRsZVN1Ym1pc3Npb24uYmluZCh0aGlzKTtcbiAgfVxuXG4gIF9nZXRJbnB1dFZhbHVlcyhmb3JtKSB7XG4gICAgY29uc3QgaW5wdXRMaXN0ID0gQXJyYXkuZnJvbShmb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJy5wb3B1cF9faW5wdXQnKSk7XG4gICAgY29uc3QgaW5wdXRPYmogPSB7fTtcbiAgICBpbnB1dExpc3QuZm9yRWFjaChpbnB1dEVsZW1lbnQgPT4ge1xuICAgICAgY29uc3QgaW5wdXROYW1lID0gaW5wdXRFbGVtZW50Lm5hbWUuc3BsaXQoXCItXCIpWzBdO1xuICAgICAgaW5wdXRPYmpbaW5wdXROYW1lXSA9IGlucHV0RWxlbWVudC52YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gaW5wdXRPYmo7XG4gIH1cblxuICBfaGFuZGxlU3VibWlzc2lvbigpIHtcbiAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0KHRoaXMuX2dldElucHV0VmFsdWVzKHRoaXMuX2Zvcm0pKTtcbiAgfVxuXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLl9mb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMuX2hhbmRsZVN1Ym1pc3Npb24pO1xuICB9XG5cbiAgX3JlbW92ZUV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuX2Zvcm0ucmVtb3ZlRXZlbnRMaXN0ZW5lcignc3VibWl0JywgdGhpcy5faGFuZGxlU3VibWlzc2lvbik7XG4gIH1cblxuICBvcGVuKCkge1xuICAgIHRoaXMuX2hhbmRsZVBvcHVwT3BlbigpO1xuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgc3VwZXIub3BlbigpO1xuICB9XG5cbiAgY2xvc2UoKSB7XG4gICAgcmVzZXRTdWJtaXRCdG4odGhpcy5fcG9wdXAsIHZhbGlkYXRpb25PYmplY3QpO1xuICAgIHJlc2V0VmFsaWRhdGlvbih0aGlzLl9wb3B1cCwgdmFsaWRhdGlvbk9iamVjdCk7XG4gICAgc3VwZXIuY2xvc2UoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgbmFtZUZpZWxkLCBqb2JGaWVsZCB9IGZyb20gXCIuLi9jb25zdGFudHMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlckluZm8ge1xuICBjb25zdHJ1Y3Rvcih7IG5hbWUsIGpvYiB9KSB7XG4gICAgdGhpcy5fbmFtZUlucHV0ID0gbmFtZTtcbiAgICB0aGlzLl9qb2JJbnB1dCA9IGpvYjtcbiAgICB0aGlzLl9uYW1lRmllbGQgPSBuYW1lRmllbGQ7XG4gICAgdGhpcy5fam9iRmllbGQgPSBqb2JGaWVsZDtcbiAgfVxuXG4gIHNldFVzZXJJbmZvKHsgbmFtZSwgam9iIH0pIHtcbiAgICB0aGlzLl9uYW1lSW5wdXQgPSBuYW1lO1xuICAgIHRoaXMuX2pvYklucHV0ID0gam9iO1xuICAgIHRoaXMuX25hbWVGaWVsZC50ZXh0Q29udGVudCA9IHRoaXMuX25hbWVJbnB1dDtcbiAgICB0aGlzLl9qb2JGaWVsZC50ZXh0Q29udGVudCA9IHRoaXMuX2pvYklucHV0O1xuICB9XG59XG4iLCJpbXBvcnQgeyBhcGkgfSBmcm9tIFwiLi4vcGFnZXMvaW5kZXguanNcIjtcbmltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhDb25maXJtIGV4dGVuZHMgUG9wdXAge1xuICBjb25zdHJ1Y3Rvcihwb3B1cCwgZm9ybSkge1xuICAgIHN1cGVyKHBvcHVwKTtcbiAgICB0aGlzLl9mb3JtID0gZm9ybTtcbiAgICB0aGlzLl9kZWxldGVDYXJkID0gdGhpcy5fZGVsZXRlQ2FyZC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgX2RlbGV0ZUNhcmQoKSB7XG4gICAgYXBpLmRlbGV0ZUNhcmQodGhpcy5fZGVsQ2FyZElkLCB0aGlzLl9kZWxCdG4pXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuX2RlbENhcmQucmVtb3ZlKCk7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgdGhpcy5fZGVsZXRlQ2FyZCk7XG4gIH1cblxuICBfcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5fZm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKCdzdWJtaXQnLCB0aGlzLl9kZWxldGVDYXJkKTtcbiAgfVxuXG4gIG9wZW4oZGVsQ2FyZCwgY2FyZElkLCBkZWxldGVCdG4pIHtcbiAgICB0aGlzLl9kZWxDYXJkID0gZGVsQ2FyZDtcbiAgICB0aGlzLl9kZWxDYXJkSWQgPSBjYXJkSWQ7XG4gICAgdGhpcy5fZGVsQnRuID0gZGVsZXRlQnRuO1xuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgc3VwZXIub3BlbigpO1xuICB9XG5cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5fcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICBzdXBlci5jbG9zZSgpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBhcGkgfSBmcm9tICcuLi9wYWdlcy9pbmRleC5qcyc7XG5cbmV4cG9ydCBjbGFzcyBDYXJkIHtcbiAgY29uc3RydWN0b3IocmVjaWV2ZWRDYXJkLCBjdXJyZW50VXNlciwgc2VsZWN0b3IsIHsgaGFuZGxlUG9wdXBPcGVuLCBoYW5kbGVEZWxldGUgfSkge1xuICAgIHRoaXMuX2NhcmQgPSByZWNpZXZlZENhcmQ7XG4gICAgdGhpcy5fY3VycmVudFVzZXIgPSBjdXJyZW50VXNlcjtcbiAgICB0aGlzLl90aXRsZSA9IHRoaXMuX2NhcmQubmFtZTtcbiAgICB0aGlzLl91cmwgPSB0aGlzLl9jYXJkLmxpbms7XG4gICAgdGhpcy5fbGlrZUFycmF5ID0gdGhpcy5fY2FyZC5saWtlcztcbiAgICB0aGlzLl9jYXJkSWQgPSB0aGlzLl9jYXJkLl9pZDtcbiAgICB0aGlzLl9jYXJkT3duZXJJZCA9IHRoaXMuX2NhcmQub3duZXIuX2lkO1xuICAgIHRoaXMuX3NlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgdGhpcy5faGFuZGxlUG9wdXBPcGVuID0gaGFuZGxlUG9wdXBPcGVuO1xuICAgIHRoaXMuX2hhbmRsZURlbGV0ZSA9IGhhbmRsZURlbGV0ZTtcbiAgICB0aGlzLl9oYW5kbGVUb2dnbGVMaWtlID0gdGhpcy5faGFuZGxlVG9nZ2xlTGlrZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2hhbmRsZURlbGV0aW9uID0gdGhpcy5faGFuZGxlRGVsZXRpb24uYmluZCh0aGlzKTtcbiAgfVxuXG4gIF9nZXRUZW1wbGF0ZSgpIHtcbiAgICByZXR1cm4gZG9jdW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKHRoaXMuX3NlbGVjdG9yKVxuICAgICAgLmNvbnRlbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKCcuZWxlbWVudCcpXG4gICAgICAuY2xvbmVOb2RlKHRydWUpO1xuICB9XG5cbiAgX3NldENhcmRFbGVtZW50cygpIHtcbiAgICB0aGlzLl9lbGVtZW50ID0gdGhpcy5fZ2V0VGVtcGxhdGUoKTtcbiAgICB0aGlzLl9lbGVtZW50SW1hZ2UgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50X19pbWFnZScpO1xuICAgIHRoaXMuX2VsZW1lbnRUaXRsZSA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmVsZW1lbnRfX3RpdGxlJyk7XG4gICAgdGhpcy5fZWxlbWVudEJ0bkxpa2UgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50X19idXR0b24tbGlrZScpO1xuICAgIHRoaXMuX2VsZW1lbnRCdG5EZWwgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50X19idXR0b24tZGVsZXRlJyk7XG4gICAgdGhpcy5fZWxlbWVudExpa2VDb3VudCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmVsZW1lbnRfX2xpa2UtY291bnQnKTtcbiAgfVxuXG4gIF9yZWZyZXNoTGlrZXNBcnJheShyZXMpIHtcbiAgICB0aGlzLl9saWtlQXJyYXkgPSByZXMubGlrZXM7XG4gICAgdGhpcy5fZWxlbWVudExpa2VDb3VudC50ZXh0Q29udGVudCA9IHJlcy5saWtlcy5sZW5ndGg7XG4gIH1cblxuICBfaGFuZGxlVG9nZ2xlTGlrZSgpIHtcbiAgICBpZiAodGhpcy5fbGlrZUFycmF5LnNvbWUoYXJyYXlPYmplY3QgPT4gYXJyYXlPYmplY3QuX2lkID09PSB0aGlzLl9jdXJyZW50VXNlci5faWQpKSB7XG4gICAgICB0aGlzLl9lbGVtZW50QnRuTGlrZS5jbGFzc0xpc3QucmVtb3ZlKCdlbGVtZW50X19idXR0b24tbGlrZV9hY3RpdmUnKTtcblxuICAgICAgLy8gTWFrZSBBUEkgY2FsbCB0byByZW1vdmUgdXNlcnMgbGlrZVxuICAgICAgYXBpLnJlbW92ZUxpa2UodGhpcy5fY2FyZElkKS50aGVuKHJlcyA9PiB7XG4gICAgICAgIHRoaXMuX3JlZnJlc2hMaWtlc0FycmF5KHJlcyk7XG4gICAgICB9KTtcblxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9lbGVtZW50QnRuTGlrZS5jbGFzc0xpc3QuYWRkKCdlbGVtZW50X19idXR0b24tbGlrZV9hY3RpdmUnKTtcblxuICAgICAgLy8gTWFrZSBBUEkgY2FsbCB0byBhZGQgdXNlcnMgbGlrZVxuICAgICAgYXBpLmFkZExpa2UodGhpcy5fY2FyZElkKS50aGVuKHJlcyA9PiB7XG4gICAgICAgIHRoaXMuX3JlZnJlc2hMaWtlc0FycmF5KHJlcyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBfaGFuZGxlRGVsZXRpb24oKSB7XG4gICAgdGhpcy5faGFuZGxlRGVsZXRlKHRoaXMuX2VsZW1lbnQsIHRoaXMuX2NhcmRJZCk7XG4gIH1cblxuICBfc2V0RXZlbnRMaXRlbmVycygpIHtcbiAgICB0aGlzLl9lbGVtZW50QnRuTGlrZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX2hhbmRsZVRvZ2dsZUxpa2UpO1xuICAgIHRoaXMuX2VsZW1lbnRCdG5EZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9oYW5kbGVEZWxldGlvbik7XG4gICAgdGhpcy5fZWxlbWVudEltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5faGFuZGxlUG9wdXBPcGVuKTtcbiAgfVxuXG4gIGNyZWF0ZUNhcmQoKSB7XG4gICAgdGhpcy5fc2V0Q2FyZEVsZW1lbnRzKCk7XG4gICAgdGhpcy5fZWxlbWVudFRpdGxlLnRleHRDb250ZW50ID0gdGhpcy5fdGl0bGU7XG4gICAgdGhpcy5fZWxlbWVudEltYWdlLnNyYyA9IHRoaXMuX3VybDtcbiAgICB0aGlzLl9lbGVtZW50SW1hZ2UuYWx0ID0gdGhpcy5fdGl0bGU7XG4gICAgdGhpcy5fZWxlbWVudExpa2VDb3VudC50ZXh0Q29udGVudCA9IHRoaXMuX2NhcmQubGlrZXMubGVuZ3RoO1xuXG4gICAgLy8gQ2hlY2tzIGlmIGNhcmQgYmVsb25ncyB0byB0aGUgdmlld2VyIGFuZCByZW1vdmVzIGRlbGV0ZSBidXR0b24gaWYgbm90XG4gICAgaWYgKHRoaXMuX2NhcmRPd25lcklkICE9IHRoaXMuX2N1cnJlbnRVc2VyLl9pZCkge1xuICAgICAgdGhpcy5fZWxlbWVudEJ0bkRlbC5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICB9XG5cbiAgICAvLyBDaGVja3MgaWYgdmlld2VyIGxpa2VkIHRoZSBjYXJkIGFuZCBtYWtlcyBsaWtlIGJ1dHRvbiBhY3RpdmUgaWYgaGFzXG4gICAgaWYgKHRoaXMuX2xpa2VBcnJheS5zb21lKGFycmF5T2JqZWN0ID0+IGFycmF5T2JqZWN0Ll9pZCA9PT0gdGhpcy5fY3VycmVudFVzZXIuX2lkKSkge1xuICAgICAgdGhpcy5fZWxlbWVudEJ0bkxpa2UuY2xhc3NMaXN0LmFkZCgnZWxlbWVudF9fYnV0dG9uLWxpa2VfYWN0aXZlJyk7XG4gICAgfVxuXG4gICAgdGhpcy5fc2V0RXZlbnRMaXRlbmVycygpO1xuXG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XG4gIH1cblxufVxuIiwiLy8gSW1wb3J0c1xuaW1wb3J0ICcuL2luZGV4LmNzcyc7XG5pbXBvcnQgKiBhcyBjb25zdGFudHMgZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCBBcGkgZnJvbSAnLi4vY29tcG9uZW50cy9BcGkuanMnO1xuaW1wb3J0IFNlY3Rpb24gZnJvbSAnLi4vY29tcG9uZW50cy9TZWN0aW9uLmpzJztcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tICcuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzJztcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gJy4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyc7XG5pbXBvcnQgVXNlckluZm8gZnJvbSAnLi4vY29tcG9uZW50cy9Vc2VySW5mby5qcyc7XG5pbXBvcnQgUG9wdXBXaXRoQ29uZmlybSBmcm9tICcuLi9jb21wb25lbnRzL1BvcHVwV2l0aENvbmZpcm0uanMnO1xuaW1wb3J0IHsgQ2FyZCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ2FyZC5qcyc7XG5pbXBvcnQgeyBGb3JtVmFsaWRhdG9yIH0gZnJvbSAnLi4vY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzJztcblxuZXhwb3J0IGNvbnN0IGFwaSA9IG5ldyBBcGkoe1xuICBiYXNlVXJsOiBcImh0dHBzOi8vYXJvdW5kLm5vbW9yZXBhcnRpZXMuY28vdjEvZ3JvdXAtMTJcIixcbiAgaGVhZGVyczoge1xuICAgIGF1dGhvcml6YXRpb246IFwiYmQ2NmFjNDYtOGMzZC00MTViLWI0ZmUtZDc3YmQwYWYzNzVhXCIsXG4gICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgfVxufSk7XG5cbi8vIEdldHRpbmcgZGF0YSB1cG9uIHNpdGUgbG9hZGluZ1xuUHJvbWlzZS5hbGwoW2FwaS5nZXRVc2VySW5mbygpLCBhcGkuZ2V0SW5pdGlhbENhcmRzKCksIGFwaS5nZXRVc2VySW1nKCldKVxuICAudGhlbigoW3VzZXJEYXRhLCBpbml0aWFsQ2FyZHNEYXRhLCB1c2VySW1nXSkgPT4ge1xuXG4gICAgLy8gRnVuY3Rpb24gZm9yIGFkZGluZyB0aGUgY2FyZCB0byB0aGUgRE9NXG4gICAgY29uc3QgYWRkRG9tQ2FyZCA9IChyZWNpZXZlZENhcmQpID0+IHtcbiAgICAgIGNvbnN0IGNhcmQgPSBuZXcgQ2FyZChyZWNpZXZlZENhcmQsIHVzZXJEYXRhLFxuICAgICAgICBcIiNlbGVtZW50LXRlbXBsYXRlXCIsIHtcbiAgICAgICAgICBoYW5kbGVQb3B1cE9wZW46ICgpID0+IHtcbiAgICAgICAgICAgIGVuZ2xhcmdlZEltZ1BvcHVwLm9wZW4ocmVjaWV2ZWRDYXJkLmxpbmssIHJlY2lldmVkQ2FyZC5uYW1lKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGhhbmRsZURlbGV0ZTogKGRlbENhcmQsIGNhcmRJZCwgKSA9PiB7XG4gICAgICAgICAgICBjb25maXJtRGVsUG9wdXAub3BlbihkZWxDYXJkLCBjYXJkSWQsIGNvbnN0YW50cy5jb25maXJtUG9wdXBEZWxCdG4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkuY3JlYXRlQ2FyZCgpO1xuICAgICAgcmV0dXJuIGNhcmQ7XG4gICAgfVxuXG4gICAgLy8gUHJvZmlsZSBlZGl0aW5nIHBvcHVwXG4gICAgY29uc3QgZWRpdFByb2ZpbGVQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKHtcbiAgICAgIGhhbmRsZUZvcm1TdWJtaXQ6IChpbnB1dHMpID0+IHtcbiAgICAgICAgYXBpLnVwbG9hZFVzZXJJbmZvKHsgbmFtZTogaW5wdXRzLm5hbWUsIGpvYjogaW5wdXRzLmpvYiB9LCBjb25zdGFudHMuZWRpdFBvcHVwU3VibWl0QnRuKVxuICAgICAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgICB1c2VySW5mby5zZXRVc2VySW5mbyh7IG5hbWU6IHJlcy5uYW1lLCBqb2I6IHJlcy5hYm91dCB9KTtcbiAgICAgICAgICAgIGVkaXRQcm9maWxlUG9wdXAuY2xvc2UoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgfSxcbiAgICAgIGhhbmRsZVBvcHVwT3BlbjogKCkgPT4ge1xuICAgICAgICBjb25zdGFudHMubmFtZUlucHV0LnZhbHVlID0gY29uc3RhbnRzLm5hbWVGaWVsZC50ZXh0Q29udGVudDtcbiAgICAgICAgY29uc3RhbnRzLmpvYklucHV0LnZhbHVlID0gY29uc3RhbnRzLmpvYkZpZWxkLnRleHRDb250ZW50O1xuICAgICAgfSxcbiAgICB9LCB7XG4gICAgICBwb3B1cDogY29uc3RhbnRzLmVkaXRQb3B1cCxcbiAgICAgIGZvcm06IGNvbnN0YW50cy5lZGl0Rm9ybSxcbiAgICB9KTtcblxuICAgIC8vIFJlbmRlcmluZyBpbml0aWFsIGNhcmRzXG4gICAgY29uc3QgY2FyZExpc3QgPSBuZXcgU2VjdGlvbih7XG4gICAgICBpdGVtczogaW5pdGlhbENhcmRzRGF0YSxcbiAgICAgIHJlbmRlcmVyOiAoY2FyZEVsZW1lbnQpID0+IHtcbiAgICAgICAgY2FyZExpc3QuYWRkSXRlbShhZGREb21DYXJkKGNhcmRFbGVtZW50KSk7XG4gICAgICB9XG4gICAgfSwgJy5lbGVtZW50cycpO1xuICAgIGNhcmRMaXN0LnJlbmRlcmVyKCk7XG5cbiAgICAvLyBTZXR0aW5nIGluaXRpYWwgdXNlciBkYXRhXG4gICAgY29uc3RhbnRzLm5hbWVGaWVsZC50ZXh0Q29udGVudCA9IHVzZXJEYXRhLm5hbWU7XG4gICAgY29uc3RhbnRzLmpvYkZpZWxkLnRleHRDb250ZW50ID0gdXNlckRhdGEuYWJvdXQ7XG4gICAgY29uc3RhbnRzLnVzZXJBdmF0YXIuc3JjID0gdXNlckltZy5hdmF0YXI7XG5cbiAgICAvLyBJbWFnZSBwb3B1cCBzZWxlY3RvclxuICAgIGNvbnN0IGltYWdlUG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW1hZ2UtcG9wdXAnKTtcblxuICAgIC8vIENyZWF0aW5nIFVzZXJJbmZvIGNsYXNzIGluc3RhbmNlXG4gICAgY29uc3QgdXNlckluZm8gPSBuZXcgVXNlckluZm8oeyBuYW1lOiBcIlwiLCBqb2I6IFwiXCIgfSk7XG5cbiAgICAvLyBFbmxhcmdlZCBpbWFnZSBwb3B1cFxuICAgIGNvbnN0IGVuZ2xhcmdlZEltZ1BvcHVwID0gbmV3IFBvcHVwV2l0aEltYWdlKGltYWdlUG9wdXApO1xuXG4gICAgLy8gUG9wdXAgZm9yIGNvbmZpcm1pbmcgY2FyZCBkZWxldGlvblxuICAgIGNvbnN0IGNvbmZpcm1EZWxQb3B1cCA9IG5ldyBQb3B1cFdpdGhDb25maXJtKFxuICAgICAgY29uc3RhbnRzLmNvbmZpcm1Qb3B1cCxcbiAgICAgIGNvbnN0YW50cy5jb25maXJtUG9wdXBGb3JtKTtcblxuICAgIC8vIFByb2ZpbGUgcGljdHVyZSBjaGFuZ2luZyBwb3B1cFxuICAgIGNvbnN0IGVkaXRQcm9maWxlSW1nUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybSh7XG4gICAgICBoYW5kbGVGb3JtU3VibWl0OiAoKSA9PiB7XG4gICAgICAgIGFwaS51cGxvYWRQcm9maWxlSW1nKGNvbnN0YW50cy5pbWdJbnB1dC52YWx1ZSwgY29uc3RhbnRzLmltZ0NoYW5nZVN1Ym1pdEJ0bilcbiAgICAgICAgICAudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgY29uc3RhbnRzLnVzZXJBdmF0YXIuc3JjID0gcmVzLmF2YXRhcjtcbiAgICAgICAgICAgIGVkaXRQcm9maWxlSW1nUG9wdXAuY2xvc2UoKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBoYW5kbGVQb3B1cE9wZW46ICgpID0+IHtcbiAgICAgICAgY29uc3RhbnRzLmltZ0lucHV0LnZhbHVlID0gXCJcIjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBwb3B1cDogY29uc3RhbnRzLmltZ0NoYW5nZVBvcHVwLFxuICAgICAgZm9ybTogY29uc3RhbnRzLmltZ0NoYW5nZUZvcm0sXG4gICAgfSk7XG5cbiAgICAvLyBQb3B1cCBmb3IgYWRkaW5nIG5ldyBpbWFnZXNcbiAgICBjb25zdCBhZGRDYXJkUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybSh7XG4gICAgICBoYW5kbGVGb3JtU3VibWl0OiAoaW5wdXRzKSA9PiB7XG4gICAgICAgIGFwaS51cGxvYWRDYXJkKGlucHV0cy5uYW1lLCBpbnB1dHMubGluaywgY29uc3RhbnRzLmFkZFBvcHVwU3VibWl0QnRuKVxuICAgICAgICAgIC50aGVuKHJlY2lldmVkQ2FyZCA9PiB7XG4gICAgICAgICAgICBjb25zdGFudHMuY2FyZHNDb250YWluZXIucHJlcGVuZChhZGREb21DYXJkKHJlY2lldmVkQ2FyZCkpO1xuICAgICAgICAgICAgYWRkQ2FyZFBvcHVwLmNsb3NlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgaGFuZGxlUG9wdXBPcGVuOiAoKSA9PiB7XG4gICAgICAgIGNvbnN0YW50cy50aXRsZUlucHV0LnZhbHVlID0gXCJcIjtcbiAgICAgICAgY29uc3RhbnRzLnVybElucHV0LnZhbHVlID0gXCJcIjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBwb3B1cDogY29uc3RhbnRzLmFkZFBvcHVwLFxuICAgICAgZm9ybTogY29uc3RhbnRzLmFkZEZvcm0sXG4gICAgfSk7XG5cbiAgICAvLyBGb3JtIHZhbGlkYXRpb24gZm9yIGFsbCBmb3Jtc1xuICAgIGNvbnN0YW50cy5mb3JtTGlzdC5mb3JFYWNoKGZvcm1FbGVtZW50ID0+IHtcbiAgICAgIG5ldyBGb3JtVmFsaWRhdG9yKGNvbnN0YW50cy52YWxpZGF0aW9uT2JqZWN0LCBmb3JtRWxlbWVudCkuZW5hYmxlVmFsaWRhdGlvbigpO1xuICAgIH0pO1xuXG4gICAgLy8gQnV0dG9uIGV2ZW50IGxpc3RlbmVyc1xuICAgIGNvbnN0YW50cy5hZGRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBhZGRDYXJkUG9wdXAub3BlbigpO1xuICAgIH0pO1xuXG4gICAgY29uc3RhbnRzLmltZ092ZXJsYXkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBlZGl0UHJvZmlsZUltZ1BvcHVwLm9wZW4oKTtcbiAgICB9KTtcblxuICAgIGNvbnN0YW50cy5lZGl0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgZWRpdFByb2ZpbGVQb3B1cC5vcGVuKCk7XG4gICAgfSk7XG4gIH0pLmNhdGNoKGVycm9yID0+IGNvbnNvbGUubG9nKGBFcnJvciwgJHtlcnJvcn1gKSk7XG4iXSwibmFtZXMiOlsiX193ZWJwYWNrX3JlcXVpcmVfXyIsImV4cG9ydHMiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJ2YWxpZGF0aW9uT2JqZWN0IiwiZm9ybVNlbGVjdG9yIiwiaW5wdXRTZWxlY3RvciIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsImVycm9yQ2xhc3MiLCJwb3B1cEVycm9yIiwiZXJyb3JUeXBlIiwiZWRpdEJ0biIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImFkZEJ0biIsImNhcmRzQ29udGFpbmVyIiwiZm9ybUxpc3QiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYWRkUG9wdXAiLCJhZGRGb3JtIiwiYWRkUG9wdXBTdWJtaXRCdG4iLCJ0aXRsZUlucHV0IiwidXJsSW5wdXQiLCJlZGl0UG9wdXAiLCJlZGl0Rm9ybSIsImVkaXRQb3B1cFN1Ym1pdEJ0biIsIm5hbWVJbnB1dCIsImpvYklucHV0IiwiaW1nQ2hhbmdlUG9wdXAiLCJpbWdDaGFuZ2VTdWJtaXRCdG4iLCJpbWdJbnB1dCIsImltZ0NoYW5nZUZvcm0iLCJjb25maXJtUG9wdXAiLCJjb25maXJtUG9wdXBGb3JtIiwiY29uZmlybVBvcHVwRGVsQnRuIiwibmFtZUZpZWxkIiwiam9iRmllbGQiLCJ1c2VyQXZhdGFyIiwiaW1nT3ZlcmxheSIsIkFwaSIsImJhc2VVcmwiLCJoZWFkZXJzIiwidGhpcyIsIl9iYXNlVXJsIiwiX2hlYWRlcnMiLCJfY3VycmVudFVzZXIiLCJnZXRVc2VySW5mbyIsInJlcyIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJjb25zb2xlIiwibG9nIiwic3RhdHVzIiwiZmV0Y2giLCJ0aGVuIiwiX2hhbmRsZVJlc3BvbnNlIiwiY2F0Y2giLCJlcnJvciIsInRpdGxlIiwibGluayIsInN1Ym1pdEJ1dHRvbiIsImlubmVyVGV4dCIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwibmFtZSIsImNhcmRPYmplY3QiLCJhdmF0YXIiLCJqb2IiLCJhYm91dCIsImNhcmRJZCIsImRlbGV0ZUJ1dHRvbiIsIlNlY3Rpb24iLCJzZWxlY3RvciIsIml0ZW1zIiwicmVuZGVyZXIiLCJfcmVuZGVyZWRJdGVtcyIsIl9yZW5kZXJlciIsIl9jb250YWluZXIiLCJmb3JFYWNoIiwiZWxlbWVudCIsImFwcGVuZCIsIlBvcHVwIiwicG9wdXAiLCJfcG9wdXAiLCJfaGFuZGxlRXNjQ2xvc2UiLCJiaW5kIiwiX2hhbmRsZUNsaWNrQ2xvc2UiLCJfaGFuZGxlQnRuQ2xvc2UiLCJfY2xvc2VCdG4iLCJldnQiLCJjbG9zZSIsInRhcmdldCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2V0RXZlbnRMaXN0ZW5lcnMiLCJjbGFzc0xpc3QiLCJhZGQiLCJfcmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJyZW1vdmUiLCJQb3B1cFdpdGhJbWFnZSIsIl9wb3B1cEltZyIsIl9wb3B1cFRpdGxlIiwidXJsIiwic3JjIiwiYWx0IiwidGV4dENvbnRlbnQiLCJGb3JtVmFsaWRhdG9yIiwic2V0dGluZ3MiLCJfc2V0dGluZ3MiLCJfZm9ybSIsImlucHV0RWxlbWVudCIsImVycm9yTWVzc2FnZSIsImVycm9yRWxlbWVudCIsImlkIiwidmFsaWRpdHkiLCJ2YWxpZCIsIl9oaWRlSW5wdXRFcnJvciIsIl9zaG93SW5wdXRFcnJvciIsInZhbGlkYXRpb25NZXNzYWdlIiwiaW5wdXRMaXN0Iiwic29tZSIsImJ1dHRvbkVsZW1lbnQiLCJfaGFzSW52YWxpZElucHV0Iiwic2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiQXJyYXkiLCJmcm9tIiwiX3RvZ2dsZUJ1dHRvblN0YXRlIiwiX2NoZWNrSW5wdXRWYWxpZGl0eSIsInByZXZlbnREZWZhdWx0IiwiX3NldEV2ZW50TGlzdGVuZXJzIiwiUG9wdXBXaXRoRm9ybSIsImhhbmRsZUZvcm1TdWJtaXQiLCJoYW5kbGVQb3B1cE9wZW4iLCJmb3JtIiwiX2hhbmRsZUZvcm1TdWJtaXQiLCJfaGFuZGxlUG9wdXBPcGVuIiwiX2hhbmRsZVN1Ym1pc3Npb24iLCJpbnB1dE9iaiIsImlucHV0TmFtZSIsInNwbGl0IiwidmFsdWUiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJzdWJtaXRCdG4iLCJyZXNldFN1Ym1pdEJ0biIsInJlc2V0VmFsaWRhdGlvbiIsIlVzZXJJbmZvIiwiX25hbWVJbnB1dCIsIl9qb2JJbnB1dCIsIl9uYW1lRmllbGQiLCJfam9iRmllbGQiLCJQb3B1cFdpdGhDb25maXJtIiwiX2RlbGV0ZUNhcmQiLCJhcGkiLCJkZWxldGVDYXJkIiwiX2RlbENhcmRJZCIsIl9kZWxCdG4iLCJfZGVsQ2FyZCIsImRlbENhcmQiLCJkZWxldGVCdG4iLCJDYXJkIiwicmVjaWV2ZWRDYXJkIiwiY3VycmVudFVzZXIiLCJoYW5kbGVEZWxldGUiLCJfY2FyZCIsIl90aXRsZSIsIl91cmwiLCJfbGlrZUFycmF5IiwibGlrZXMiLCJfY2FyZElkIiwiX2lkIiwiX2NhcmRPd25lcklkIiwib3duZXIiLCJfc2VsZWN0b3IiLCJfaGFuZGxlRGVsZXRlIiwiX2hhbmRsZVRvZ2dsZUxpa2UiLCJfaGFuZGxlRGVsZXRpb24iLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiX2VsZW1lbnQiLCJfZ2V0VGVtcGxhdGUiLCJfZWxlbWVudEltYWdlIiwiX2VsZW1lbnRUaXRsZSIsIl9lbGVtZW50QnRuTGlrZSIsIl9lbGVtZW50QnRuRGVsIiwiX2VsZW1lbnRMaWtlQ291bnQiLCJsZW5ndGgiLCJhcnJheU9iamVjdCIsInJlbW92ZUxpa2UiLCJfcmVmcmVzaExpa2VzQXJyYXkiLCJhZGRMaWtlIiwiX3NldENhcmRFbGVtZW50cyIsInN0eWxlIiwidmlzaWJpbGl0eSIsIl9zZXRFdmVudExpdGVuZXJzIiwiYXV0aG9yaXphdGlvbiIsImFsbCIsImdldEluaXRpYWxDYXJkcyIsImdldFVzZXJJbWciLCJ1c2VyRGF0YSIsImluaXRpYWxDYXJkc0RhdGEiLCJ1c2VySW1nIiwiYWRkRG9tQ2FyZCIsImVuZ2xhcmdlZEltZ1BvcHVwIiwib3BlbiIsImNvbmZpcm1EZWxQb3B1cCIsImNvbnN0YW50cyIsImNyZWF0ZUNhcmQiLCJlZGl0UHJvZmlsZVBvcHVwIiwiaW5wdXRzIiwidXBsb2FkVXNlckluZm8iLCJ1c2VySW5mbyIsInNldFVzZXJJbmZvIiwiY2FyZExpc3QiLCJjYXJkRWxlbWVudCIsImFkZEl0ZW0iLCJpbWFnZVBvcHVwIiwiZWRpdFByb2ZpbGVJbWdQb3B1cCIsInVwbG9hZFByb2ZpbGVJbWciLCJhZGRDYXJkUG9wdXAiLCJ1cGxvYWRDYXJkIiwiZm9ybUVsZW1lbnQiLCJlbmFibGVWYWxpZGF0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==